"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[989],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=o,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},74175:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],l={id:"LSL",title:"Lab Streaming Layer (LSL)"},s=void 0,p={unversionedId:"Software/CompatibleThirdPartySoftware/LSL",id:"Software/CompatibleThirdPartySoftware/LSL",title:"Lab Streaming Layer (LSL)",description:"Lab streaming layer  is a system for synchronizing streaming data for live analysis or recording. LSL is a good way to send your OpenBCI stream to applications that can record or manipulate the data, such as Matlab (see our Matlab tutorial for using LSL in this context).",source:"@site/docs/Software/CompatibleThirdPartySoftware/04-LSL.md",sourceDirName:"Software/CompatibleThirdPartySoftware",slug:"/Software/CompatibleThirdPartySoftware/LSL",permalink:"/Software/CompatibleThirdPartySoftware/LSL",draft:!1,editUrl:"https://github.com/OpenBCI/Documentation/edit/master/website/docs/Software/CompatibleThirdPartySoftware/04-LSL.md",tags:[],version:"current",lastUpdatedAt:1627405574,formattedLastUpdatedAt:"Jul 27, 2021",sidebarPosition:4,frontMatter:{id:"LSL",title:"Lab Streaming Layer (LSL)"},sidebar:"docs",previous:{title:"OpenViBE",permalink:"/Software/CompatibleThirdPartySoftware/OpenVibe"},next:{title:"BrainBay",permalink:"/Software/CompatibleThirdPartySoftware/BrainBay"}},u={},d=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2},{value:"Simple Stream",id:"simple-stream",level:3},{value:"Configuring the board from the command line interface",id:"configuring-the-board-from-the-command-line-interface",level:3},{value:"GUI",id:"gui",level:2},{value:"Streaming",id:"streaming",level:3},{value:"Configuring the board from the GUI",id:"configuring-the-board-from-the-gui",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Credit",id:"credit",level:2}],m={toc:d},c="wrapper";function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/sccn/labstreaminglayer"},"Lab streaming layer"),"  is a system for synchronizing streaming data for live analysis or recording. LSL is a good way to send your OpenBCI stream to applications that can record or manipulate the data, such as Matlab (see our Matlab tutorial for using LSL in this context)."),(0,a.kt)("p",null,"This tutorial will show you how to set up LSL using the OpenBCI Python API and then explain the various ways you can use LSL to perform experiments or record data."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Download or clone the ",(0,a.kt)("a",{parentName:"strong",href:"https://github.com/openbci-archive/OpenBCI_LSL"},"OpenBCI_LSL")," repo from Github.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Download and install ",(0,a.kt)("a",{parentName:"strong",href:"https://www.python.org/downloads/"},"Python")," (either version 2 or 3)."),"\nPython might already be installed on your computer. Type python --version to check if you have Python version 2 or 3 installed."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Install Python requirements"),"\nTo use this program, you need the following Python packages installed:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"pylsl (version 1.10.5 or greater)"),(0,a.kt)("li",{parentName:"ul"},"pyserial (version 3.1.1 or greater)"),(0,a.kt)("li",{parentName:"ul"},"numpy (version 1.11.1 or greater)"),(0,a.kt)("li",{parentName:"ul"},"pyqtgraph (version 0.9.10 or greater) (optional: needded for GUI functionality only)"),(0,a.kt)("li",{parentName:"ul"},"scipy (version 0.17.1 or greater) (optional: needed for GUI functionality only)")),(0,a.kt)("p",null,'To automatically install using pip, navigate to the "OpenBCI_LSL" folder on your command line and terminal, and type:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\npip install -r requirements.txt\n\n")),(0,a.kt)("p",null,"Note: pip may have issues install numpy and scipy for some users. Install these manually if you have issues."),(0,a.kt)("p",null,'Note: If you get the message "pip: command not found", you need to install pip: sudo easy_install pip. Then retry the command above.'),(0,a.kt)("p",null,"To use the GUI features of this application, you must separately install PyQt4 using these instructions: Install PyQt4. The command line version of this program is still functional if PyQt4 is not installed."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"simple-stream"},"Simple Stream"),(0,a.kt)("p",null,'First, make sure your dongle is plugged in and board is powered on. Then go the the "OpenBCI_LSL" folder and type the following command:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\npython openbci_lsl.py --stream\n\n")),(0,a.kt)("p",null,"After a few moments, you should see this output:"),(0,a.kt)("img",{src:"https://raw.githubusercontent.com/gabrielibagon/OpenBCI_LSL/master/images/CLI.jpg?raw=true",width:"80%"}),(0,a.kt)("p",null,'If an error is raised about not being able to find your the board or serial port, you can override the automatic board detection by specifying the serial port in a command line argument before "--stream". The format is as follows:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\npython openbci_lsl.py [PORT] --stream\n\n")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\npython openbci_lsl.py /dev/ttyUSB0 --stream\n\n")),(0,a.kt)("p",null,"After board initialization, you are now ready to start streaming."),(0,a.kt)("p",null,"To begin streaming, type /start"),(0,a.kt)("p",null,"To stop streaming, type /stop"),(0,a.kt)("p",null,"To disconnect from the serial port, type /exit"),(0,a.kt)("p",null,"Remember to use /exit to disconnect the board as you end the program, to ensure that the serial port is safely closed."),(0,a.kt)("h3",{id:"configuring-the-board-from-the-command-line-interface"},"Configuring the board from the command line interface"),(0,a.kt)("p",null,"You also configure board settings from this interface. For full information regarding board settings and commands, see the ",(0,a.kt)("a",{parentName:"p",href:"/Cyton/CytonProgram"},"Cyton board programming tutorial"),"."),(0,a.kt)("p",null,'To enter Channel Settings mode, you would need to enter an "x", followed by certain channel settings, followed by an "X". For example:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\n x3020000X\n\n")),(0,a.kt)("p",null,"This command will do the following: \u2018x\u2019 enters Channel Settings mode. Channel 3 is set up to be powered up, with gain of 2, normal input, removed from BIAS generation, removed from SRB2, removed from SRB1. The final \u2018X\u2019 latches the settings to the ADS1299 channel settings register."),(0,a.kt)("p",null,"To view current board and register settings, enter: ",(0,a.kt)("inlineCode",{parentName:"p"},"?")),(0,a.kt)("p",null,"If you get an error message at any point while using the command line interface, check the Troubleshooting section, or pull up an issue on the Github repository."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Changing Channel Locations from the command line interface"),"\nTo change the channel location metadata of the stream, type /loc followed by a space and then a comma-separated list of new set of channel locations. For example, to change the default channel locations to a new set of eight channels, the command might look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\n/loc F3,F4,C3,C4,T3,T4,P3,P4\n\n")),(0,a.kt)("p",null,"This can only be done while the board is not currently streaming."),(0,a.kt)("h2",{id:"gui"},"GUI"),(0,a.kt)("p",null,"If you would like the ability to configure the board and LSL stream with advanced settings, you can do so by running the GUI. The GUI comes up by default if you run the program with no flags:"),(0,a.kt)("p",null,"python openbci_lsl.py"),(0,a.kt)("p",null,"If you plug in your board and dongle before running the above command, the program should have already detected the appropriate settings for your board (port and daisy). If not, you can enter those yourself in the appropriate fields."),(0,a.kt)("img",{src:"https://raw.githubusercontent.com/gabrielibagon/OpenBCI_LSL/master/images/GUI.jpg?raw=true",width:"60%"}),(0,a.kt)("h3",{id:"streaming"},"Streaming"),(0,a.kt)("p",null,'To stream data, make sure the appropriate Port, Daisy, and LSL Stream fields are filled in correctly. Then, press "Connect" and then "Start Streaming". To pause streaming, click "Stop Streaming". To disconnect the board, press "Disconnect".'),(0,a.kt)("p",null,'The board must be disconnected to change LSL settings. Once you "Connect" again, your current settings are saved until the next time you disconnect.'),(0,a.kt)("p",null,"For consistent performance, pause streaming before you disconnect the board."),(0,a.kt)("h3",{id:"configuring-the-board-from-the-gui"},"Configuring the board from the GUI"),(0,a.kt)("p",null,'To change the channel settings, click on "Board Config". Note: this must be done BEFORE you press "Connect".'),(0,a.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,a.kt)("p",null,"Note: Many issues with board connectivity can simply be resolved by restarting the program and your board. Unplug your dongle, turn off the board, plug in the dongle, and turn on the board, in that order. This method works the most consistently."),(0,a.kt)("h2",{id:"next-steps"},"Next Steps"),(0,a.kt)("p",null,"Once you have the Lab Streaming Layer set up with your OpenBCI board, check out these other tutorials to view the stream in a variety of different programs:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/Software/CompatibleThirdPartySoftware/Matlab"},"Matlab tutorial")),(0,a.kt)("h2",{id:"credit"},"Credit"),(0,a.kt)("p",null,"Thanks to Winslow Strong for posting the original tutorial on the OpenBCI forums!"))}h.isMDXComponent=!0}}]);